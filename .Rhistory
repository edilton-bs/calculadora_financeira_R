mean(6,7,8,8,9,10)
x = c(6,7,8,8,9,10)
mean(x)
MG = exp(mean(log(x)))
x = c(6,7,8,8,9,10)
MA = mean(x)
MA
MA = exp(mean(log(x)))
MA = exp(mean(log(x)))
clear
clean
x = c(6,7,8,8,9,10)
MA = mean(x)
MA
x = c(6,7,8,8,9,10)
x
HM = harmonic.mean(x)
HM = harmonic.mean(x)
library("psych")
x
HM = harmonic.mean(x)
HM
require(deSolve)
SEIR <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dS <- B -(beta*S*I)/N - mu*S
dE <- (beta*S*I)/N - sigma*E - mu*E - alpha*E
dI <- sigma*E - gamma*I - mu*I
dR <- gamma*I + sigma*E - mu*R
return(list(c(dS, dE, dI, dR, dM)))
})
}
params <- c(beta=0.5, sigma=0.25, gamma=0.2, mu=0.001)
initial_state <- c(S=999999, E=1, I=0, R=0, M=0)
times <- 0:365
model <- ode(initial_state, times, SEIR, params)
import(deSolve)
require(deSolve)
install.packages('deSolve')
require(deSolve)
SEIR <- function(time, current_state, params){
+
+     with(as.list(c(current_state, params)),{
+         N <- S+E+I+R
+         dS <- B -(beta*S*I)/N - mu*S
+         dE <- (beta*S*I)/N - sigma*E - mu*E - alpha*E
+         dI <- sigma*E - gamma*I - mu*I
+         dR <- gamma*I + sigma*E - mu*R
+
+         return(list(c(dS, dE, dI, dR, dM)))
+     })
SEIR <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dS <- B -(beta*S*I)/N - mu*S
dE <- (beta*S*I)/N - sigma*E - mu*E - alpha*E
dI <- sigma*E - gamma*I - mu*I
dR <- gamma*I + sigma*E - mu*R
return(list(c(dS, dE, dI, dR, dM)))
})
}
View(SEIR)
View(SEIR)
View(SEIR)
model <- ode(initial_state, times, SEIR, params)
params <- c(B = 0.32, beta=0.5, sigma=0.25, gamma=0.2, mu=0.001)
model <- ode(initial_state, times, SEIR, params)
params <- c(B = 0.32, alpha = 0.01, beta=0.5, sigma=0.25, gamma=0.2, mu=0.001)
model <- ode(initial_state, times, SEIR, params)
SEIR <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dS <- B -(beta*S*I)/N - mu*S
dE <- (beta*S*I)/N - sigma*E - mu*E - alpha*E
dI <- sigma*E - gamma*I - mu*I
dR <- gamma*I + sigma*E - mu*R
return(list(c(dS, dE, dI, dR)))
})
}
View(SEIR)
model <- ode(initial_state, times, SEIR, params)
initial_state <- c(S=999999, E=1, I=0, R=0)
model <- ode(initial_state, times, SEIR, params)
require(ggplot2)
install.packages(ggplot2)
"ggplot2"
install.packages("ggplot2")
require("ggplot2")
matplot(model, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
params <- c(B = 0.32, alpha = 0.01, beta=0.5, sigma=0.25, gamma=0.2, mu=0.001)
times <- 0:365
initial_state <- c(S=600, E=250, I=100, R=50)
model <- ode(initial_state, times, SEIR, params)
matplot(model, type="l", lty=1, main="SEIR model", xlab="Time")
> legend <- colnames(model)[2:6]
legend <- colnames(model)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
legend <- colnames(model)[2:5]
legend("right", legend=legend, col=2:5, lty = 1)
times <- 0:100
matplot(model, type="l", lty=1, main="SEIR model", xlab="Time")
model <- ode(initial_state, times, SEIR, params)
matplot(model, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
legend <- colnames(model)[2:5]
legend("right", legend=legend, col=2:5, lty = 1)
clear
clean
tinytex::install_tinytex()
data <-read_csv(url(urlfile))
urlfile = "https://raw.githubusercontent.com/maxbiostat/stats_modelling/master/data/mystery_dragon.csv"
library (readr)
urlfile = "https://raw.githubusercontent.com/maxbiostat/stats_modelling/master/data/mystery_dragon.csv"
data <-read_csv(url(urlfile))
View(data)
View(data)
plot(data$wing_spawn, data$colour, xlab = "X", ylab = "Y", main = "Dispersion Graph")
View(data)
plot(data$wing_span, data$colour, xlab = "X", ylab = "Y", main = "Dispersion Graph")
View(data)
plot(data$wing_span, data$fire_quotient, xlab = "X", ylab = "Y", main = "Dispersion Graph")
View(data)
plot(data$wing_span, data$no_eggs, xlab = "X", ylab = "Y", main = "Dispersion Graph")
View(data)
hist(dragonEgg.data$no_eggs,
probability = TRUE,
main = "")
hist(dragonEgg.data$no_eggs,
probability = TRUE,
main = "")
hist(data$no_eggs,
probability = TRUE,
main = "")
View(data)
model <- lm(data$no_eggs ~ data$colour, data = data)
View(model)
model <- glm(data$no_eggs ~ data$colour, data = data)
summary(model)
View(data)
pairs(data[,1:4], pch = 19)
View(data)
pairs(data[,-2], pch = 19)
dispersion_graphs <- pairs(data[,-2], pch = 19)
summary(model1)
model2 <- glm(data$age ~ data$wing_span, data=data)
summary(model2)
model2 <- lm(data$age ~ data$wing_span, data=data)
summary(model2)
plot(data, residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
residuals2 <- residuals(model2)
plot(data, residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
plot(data$age, residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
plot(data$wing_span, residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
residuals2 <- residuals(model2)
plot(data$wing_span, residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
summary(model1)
model1 <- glm(data$age ~ data$colour, data = data)
summary(model1)
model2 <- lm(data$age ~ data$wing_span, data=data)
summary(model2)
residuals2 <- residuals(model2)
plot(data$wing_span, residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
plot(model2$residuals xlab = "X", ylab = "Residuals", main = "Residual Plot")
plot(model2$residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
plot(model1$residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
plot(model2$residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
AIC(model2)
AIC(model1)
summary(model1)
model2 <- glm(data$age ~ data$wing_span, data=data)
summary(model2)
plot(model2$residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
AIC(model2)
AIC(model1)
summary(model1)
model2 <- glm(data$age ~ data$wing_span, data=data)
summary(model2)
plot(model2$residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
AIC(model2)
AIC(model1)
plot(model1$residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
urlfile = "https://raw.githubusercontent.com/maxbiostat/stats_modelling/master/data/Dannys_dragons.csv"
data <-read_csv(url(urlfile))
View(data)
data <-read_csv(url(urlfile))
urlfile = "https://raw.githubusercontent.com/maxbiostat/stats_modelling/master/data/mystery_dragon.csv"
data <-read_csv(url(urlfile))
urlfile = "https://raw.githubusercontent.com/maxbiostat/stats_modelling/master/data/Dannys_dragons.csv"
data2 <-read_csv(url(urlfile))
data <-read_csv(url(urlfile))
dispersion_graphs <- pairs(data[,-2], pch = 19)
summary(model1)
ggplot(data, aes(data$age, data$colour)) +
geom_point() +
geom_smooth(method="glm")
ggplot(data, aes(data$age, data$colour)) +
geom_point() +
geom_smooth(method="lm")
ggplot(data, aes(data$colour, data$age)) +
geom_point() +
geom_smooth(method="lm")
ggplot(data, aes(data$age ~ data$wing_span)) +
geom_point() +
geom_smooth(method="lm")
ggplot(data, aes(data$age, data$wing_span)) +
geom_point() +
geom_smooth(method="lm")
ggplot(data, aes(data$age, data$wing_span)) +
geom_point() +
geom_smooth(method="lm")
library (readr)
library(ggplot2)
ggplot(data, aes(data$age, data$wing_span)) +
geom_point() +
geom_smooth(method="lm")
ggplot(data, aes(data$wing_span, data$age)) +
geom_point() +
geom_smooth(method="lm")
ggplot(data$colour)
View(data)
ggplot(data, aes(data$wing_span, data$age)) +
geom_point() +
geom_smooth(method="glm")
ggplot(data, aes(data$wing_span, data$fire_quotient)) +
geom_point() +
geom_smooth(method="lm")
ggplot(data, aes(data$wing_span, data$age)) +
geom_point() +
geom_smooth(method="glm") +
color = data$colour
ggplot(data, aes(data$wing_span, data$age)) +
geom_point() +
geom_smooth(method="glm")
ggplot(data, aes(data$wing_span, data$age, colour = colour)) +
geom_point() +
geom_smooth(method="glm")
ggplot(data, aes(data$fire_quotient, data$age, colour = colour)) +
geom_point() +
geom_smooth(method="glm")
ggplot(data, aes(data$wing_span, data$age, colour = colour)) +
geom_point() +
geom_smooth(method="glm")
summary(model1)
ggplot(data, aes(data$wing_span, data$age, colour = colour)) +
geom_point() +
geom_smooth(method="glm")
plot(model1$residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
y<- alpha + beta1 * data$fire_quotient + beta2*data$age + beta3*data$age^2
plot(data,y,pch=16,cex=1.5)
y<- alpha + beta1 * data$fire_quotient + beta2*data$age + beta3*data$age^2
beta1 = 2
beta2 = 0.002
beta3 = -.0000005
y<- alpha + beta1 * data$fire_quotient + beta2*data$age + beta3*data$age^2
plot(data,y,pch=16,cex=1.5)
alpha <- .2
beta1 <- 2
beta2 <- 0.002
beta3 <- -.0000005
y<- alpha + beta1 * data$fire_quotient + beta2*data$age + beta3*data$age^2
plot(data,y,pch=16,cex=1.5)
fit <- lm(y ~ data)
pred <- predict(fit)
fit <- lm(y ~ data)
pred <- predict(fit)
yi <- rnbinom(n=n, size = 2, mu=exp(y))
yi <- rnbinom(n=size(data), size = 2, mu=exp(y))
yi <- rnbinom(n=100, size = 2, mu=exp(y))
pred <- predict(fit)
yi <- rnbinom(n=100, size = 2, mu=exp(y))
yi2 <- poisson(mu=exp(y))
plot(model1$residuals, xlab = "X", ylab = "Residuals", main = "Residual Plot")
summary(yi)
summary(y)
summary(yi2)
yi2 <- poisson(mu=exp(y))
yi2 <- poisson(exp(y))
yi2 <- poisson(log(y))
yi2 <- poisson(y)
yi2 <- poisson(sqrt(y))
yi <- rnbinom(n=100, size = 2, mu=exp(y))
summary(yi)
AIC(yi)
AIC(y)
model = glm(data ~ yi, data=data)
model = glm(yi ~ data, data=data)
AIC(y)
true.mu <- exp(alpha + beta1 * data$fire_quotient + beta2*data$age + beta3*data$age^2)
plot(data,y,pch=16,cex=1.5)
yi <- rnbinom(n=100, size = 2, mu=true.mu)
summary(yi)
model = glm(yi ~ data, data=data)
AIC(y1)
y1 <- rnbinom(n=100, size = 2, mu=true.mu)
summary(y1)
model = glm(y1 ~ data, data=data)
AIC(y1)
model = lm(y1 ~ data, data=data)
model = lm(y1 ~ data$fire_quotient, data=data)
AIC(y1)
View(model)
model <- lm(y1 ~ data$fire_quotient, data=data)
pred <- predict(model)
pred
summary(pred)
model <- lm(y1 ~ data + I(x^2) + I(x^3))
model <- lm(y1 ~ data + I(data^2) + I(data^3))
model <- lm(y1 ~ data$age + I(data$age^2) + I(data$age^3))
pred <- predict(model)
summary(pred)
summary(model)
AIC(model)
true.mu <- exp(alpha + beta1 * data$fire_quotient)
plot(data,y,pch=16,cex=1.5)
y1 <- rnbinom(n=100, size = 2, mu=true.mu)
summary(y1)
model <- lm(y1 ~ data$age + I(data$age^2) + I(data$age^3))
summary(model)
AIC(model)
model <- lm(y1 ~ data$age + I(data$age) + I(data$age^2))
summary(model)
AIC(model)
shiny::runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
n <- populacao
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
calcular_tamanho_amostra <- function(populacao, grau_confianca, margem_erro, proporcao = 0.5) {
z <- qnorm((1 + grau_confianca/100) / 2)
n <- (z^2 * proporcao * (1 - proporcao)) / (margem_erro^2)
if (!is.infinite(n)) {
n <- ceiling(n)
}
if (!is.null(populacao) && n > populacao) {
n <- populacao
}
return(n)
}
tamanho_amostra <- calcular_tamanho_amostra(populacao = 1000, confianca = 0.95, margem_erro = 0.05, proporcao = 0.3)
tamanho_amostra <- calcular_tamanho_amostra(populacao = 1000, grau_confianca = 0.95, margem_erro = 0.05, proporcao = 0.3)
rm(list = ls())
calcular_tamanho_amostra <- function(populacao, grau_confianca, margem_erro, proporcao = 0.5) {
z <- qnorm((1 + grau_confianca/100) / 2)
n <- (z^2 * proporcao * (1 - proporcao)) / (margem_erro^2)
if (!is.infinite(n)) {
n <- ceiling(n)
}
if (!is.null(populacao) && n > populacao) {
n <- populacao
}
return(n)
}
tamanho_amostra <- calcular_tamanho_amostra(populacao = 1000, grau_confianca = 0.95, margem_erro = 0.05, proporcao = 0.3)
tamanho_amostra <- calcular_tamanho_amostra(populacao = 210000000, grau_confianca = 0.99, margem_erro = 0.01, proporcao = 0.5)
tamanho_amostra
calcular_tamanho_amostra <- function(populacao, grau_confianca, margem_erro, proporcao = 0.5) {
z <- qnorm((1 + grau_confianca) / 2)
n <- (z^2 * proporcao * (1 - proporcao)) / (margem_erro^2)
if (!is.infinite(n)) {
n <- ceiling(n)
}
if (!is.null(populacao) && n > populacao) {
n <- populacao
}
return(n)
}
tamanho_amostra <- calcular_tamanho_amostra(populacao = 210000000, grau_confianca = 0.99, margem_erro = 0.01, proporcao = 0.5)
tamanho_amostra
tamanho_amostra
tamanho_amostra <- calcular_tamanho_amostra(populacao = 210000000, grau_confianca = 0.99, margem_erro = 1, proporcao = 0.5)
tamanho_amostra
tamanho_amostra <- calcular_tamanho_amostra(populacao = 210000000, grau_confianca = 0.99, margem_erro = 0.01, proporcao = 0.5)
tamanho_amostra
tamanho_amostra <- calcular_tamanho_amostra(populacao = 210000000, grau_confianca = 0.99, margem_erro = 0.01)
tamanho_amostra
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
shiny::runApp('GitHub/calculadora_financeira_R')
shiny::runApp('GitHub/calculadora_financeira_R')
shiny::runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
runApp('GitHub/calculadora_financeira_R')
z <- qnorm((1 + grau_confianca) / 2)  # Valor crítico baseado no nível de confiança
calcular_erro_amostral <- function(grau_confianca, proporcao, tamanho_populacao) {
z <- qnorm((1 + grau_confianca) / 2)  # Valor crítico baseado no nível de confiança
erro_amostral <- z * sqrt((proporcao * (1 - proporcao)) / tamanho_populacao)
return(erro_amostral)
}
runApp('GitHub/calculadora_financeira_R')
shiny::runApp('GitHub/calculadora_financeira_R')
shiny::runApp('GitHub/calculadora_financeira_R')
